# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Cliente {
  id: ID!
  name: String
  fotos(where: FotoWhereInput! = {}, orderBy: [FotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FotoWhereUniqueInput): [Foto!]
  fotosCount(where: FotoWhereInput! = {}): Int
  createdAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ClienteWhereUniqueInput {
  id: ID
}

input ClienteWhereInput {
  AND: [ClienteWhereInput!]
  OR: [ClienteWhereInput!]
  NOT: [ClienteWhereInput!]
  id: IDFilter
  name: StringFilter
  fotos: FotoManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input FotoManyRelationFilter {
  every: FotoWhereInput
  some: FotoWhereInput
  none: FotoWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ClienteOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ClienteUpdateInput {
  name: String
  fotos: FotoRelateToManyForUpdateInput
  createdAt: DateTime
}

input FotoRelateToManyForUpdateInput {
  disconnect: [FotoWhereUniqueInput!]
  set: [FotoWhereUniqueInput!]
  create: [FotoCreateInput!]
  connect: [FotoWhereUniqueInput!]
}

input ClienteUpdateArgs {
  where: ClienteWhereUniqueInput!
  data: ClienteUpdateInput!
}

input ClienteCreateInput {
  name: String
  fotos: FotoRelateToManyForCreateInput
  createdAt: DateTime
}

input FotoRelateToManyForCreateInput {
  create: [FotoCreateInput!]
  connect: [FotoWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Grupo {
  id: ID!
  nome: String
  descricao: String
  createdAt: DateTime
  produtos(where: ProdutoWhereInput! = {}, orderBy: [ProdutoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProdutoWhereUniqueInput): [Produto!]
  produtosCount(where: ProdutoWhereInput! = {}): Int
  destaque: Boolean
}

input GrupoWhereUniqueInput {
  id: ID
}

input GrupoWhereInput {
  AND: [GrupoWhereInput!]
  OR: [GrupoWhereInput!]
  NOT: [GrupoWhereInput!]
  id: IDFilter
  nome: StringFilter
  descricao: StringFilter
  createdAt: DateTimeNullableFilter
  produtos: ProdutoManyRelationFilter
  destaque: BooleanFilter
}

input ProdutoManyRelationFilter {
  every: ProdutoWhereInput
  some: ProdutoWhereInput
  none: ProdutoWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input GrupoOrderByInput {
  id: OrderDirection
  nome: OrderDirection
  descricao: OrderDirection
  createdAt: OrderDirection
  destaque: OrderDirection
}

input GrupoUpdateInput {
  nome: String
  descricao: String
  createdAt: DateTime
  produtos: ProdutoRelateToManyForUpdateInput
  destaque: Boolean
}

input ProdutoRelateToManyForUpdateInput {
  disconnect: [ProdutoWhereUniqueInput!]
  set: [ProdutoWhereUniqueInput!]
  create: [ProdutoCreateInput!]
  connect: [ProdutoWhereUniqueInput!]
}

input GrupoUpdateArgs {
  where: GrupoWhereUniqueInput!
  data: GrupoUpdateInput!
}

input GrupoCreateInput {
  nome: String
  descricao: String
  createdAt: DateTime
  produtos: ProdutoRelateToManyForCreateInput
  destaque: Boolean
}

input ProdutoRelateToManyForCreateInput {
  create: [ProdutoCreateInput!]
  connect: [ProdutoWhereUniqueInput!]
}

type Produto {
  id: ID!
  nome: String
  descricao: String
  createdAt: DateTime
  fotos(where: FotoWhereInput! = {}, orderBy: [FotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FotoWhereUniqueInput): [Foto!]
  fotosCount(where: FotoWhereInput! = {}): Int
  grupo: Grupo
}

input ProdutoWhereUniqueInput {
  id: ID
}

input ProdutoWhereInput {
  AND: [ProdutoWhereInput!]
  OR: [ProdutoWhereInput!]
  NOT: [ProdutoWhereInput!]
  id: IDFilter
  nome: StringFilter
  descricao: StringFilter
  createdAt: DateTimeNullableFilter
  fotos: FotoManyRelationFilter
  grupo: GrupoWhereInput
}

input ProdutoOrderByInput {
  id: OrderDirection
  nome: OrderDirection
  descricao: OrderDirection
  createdAt: OrderDirection
}

input ProdutoUpdateInput {
  nome: String
  descricao: String
  createdAt: DateTime
  fotos: FotoRelateToManyForUpdateInput
  grupo: GrupoRelateToOneForUpdateInput
}

input GrupoRelateToOneForUpdateInput {
  create: GrupoCreateInput
  connect: GrupoWhereUniqueInput
  disconnect: Boolean
}

input ProdutoUpdateArgs {
  where: ProdutoWhereUniqueInput!
  data: ProdutoUpdateInput!
}

input ProdutoCreateInput {
  nome: String
  descricao: String
  createdAt: DateTime
  fotos: FotoRelateToManyForCreateInput
  grupo: GrupoRelateToOneForCreateInput
}

input GrupoRelateToOneForCreateInput {
  create: GrupoCreateInput
  connect: GrupoWhereUniqueInput
}

type Foto {
  id: ID!
  nome: String
  descricao: String
  createdAt: DateTime
  cliente: Cliente
  produto: Produto
  imagem: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input FotoWhereUniqueInput {
  id: ID
}

input FotoWhereInput {
  AND: [FotoWhereInput!]
  OR: [FotoWhereInput!]
  NOT: [FotoWhereInput!]
  id: IDFilter
  nome: StringFilter
  descricao: StringFilter
  createdAt: DateTimeNullableFilter
  cliente: ClienteWhereInput
  produto: ProdutoWhereInput
}

input FotoOrderByInput {
  id: OrderDirection
  nome: OrderDirection
  descricao: OrderDirection
  createdAt: OrderDirection
}

input FotoUpdateInput {
  nome: String
  descricao: String
  createdAt: DateTime
  cliente: ClienteRelateToOneForUpdateInput
  produto: ProdutoRelateToOneForUpdateInput
  imagem: ImageFieldInput
}

input ClienteRelateToOneForUpdateInput {
  create: ClienteCreateInput
  connect: ClienteWhereUniqueInput
  disconnect: Boolean
}

input ProdutoRelateToOneForUpdateInput {
  create: ProdutoCreateInput
  connect: ProdutoWhereUniqueInput
  disconnect: Boolean
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input FotoUpdateArgs {
  where: FotoWhereUniqueInput!
  data: FotoUpdateInput!
}

input FotoCreateInput {
  nome: String
  descricao: String
  createdAt: DateTime
  cliente: ClienteRelateToOneForCreateInput
  produto: ProdutoRelateToOneForCreateInput
  imagem: ImageFieldInput
}

input ClienteRelateToOneForCreateInput {
  create: ClienteCreateInput
  connect: ClienteWhereUniqueInput
}

input ProdutoRelateToOneForCreateInput {
  create: ProdutoCreateInput
  connect: ProdutoWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createCliente(data: ClienteCreateInput!): Cliente
  createClientes(data: [ClienteCreateInput!]!): [Cliente]
  updateCliente(where: ClienteWhereUniqueInput!, data: ClienteUpdateInput!): Cliente
  updateClientes(data: [ClienteUpdateArgs!]!): [Cliente]
  deleteCliente(where: ClienteWhereUniqueInput!): Cliente
  deleteClientes(where: [ClienteWhereUniqueInput!]!): [Cliente]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createGrupo(data: GrupoCreateInput!): Grupo
  createGrupos(data: [GrupoCreateInput!]!): [Grupo]
  updateGrupo(where: GrupoWhereUniqueInput!, data: GrupoUpdateInput!): Grupo
  updateGrupos(data: [GrupoUpdateArgs!]!): [Grupo]
  deleteGrupo(where: GrupoWhereUniqueInput!): Grupo
  deleteGrupos(where: [GrupoWhereUniqueInput!]!): [Grupo]
  createProduto(data: ProdutoCreateInput!): Produto
  createProdutos(data: [ProdutoCreateInput!]!): [Produto]
  updateProduto(where: ProdutoWhereUniqueInput!, data: ProdutoUpdateInput!): Produto
  updateProdutos(data: [ProdutoUpdateArgs!]!): [Produto]
  deleteProduto(where: ProdutoWhereUniqueInput!): Produto
  deleteProdutos(where: [ProdutoWhereUniqueInput!]!): [Produto]
  createFoto(data: FotoCreateInput!): Foto
  createFotos(data: [FotoCreateInput!]!): [Foto]
  updateFoto(where: FotoWhereUniqueInput!, data: FotoUpdateInput!): Foto
  updateFotos(data: [FotoUpdateArgs!]!): [Foto]
  deleteFoto(where: FotoWhereUniqueInput!): Foto
  deleteFotos(where: [FotoWhereUniqueInput!]!): [Foto]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  cliente(where: ClienteWhereUniqueInput!): Cliente
  clientes(where: ClienteWhereInput! = {}, orderBy: [ClienteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClienteWhereUniqueInput): [Cliente!]
  clientesCount(where: ClienteWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  grupo(where: GrupoWhereUniqueInput!): Grupo
  grupos(where: GrupoWhereInput! = {}, orderBy: [GrupoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GrupoWhereUniqueInput): [Grupo!]
  gruposCount(where: GrupoWhereInput! = {}): Int
  produto(where: ProdutoWhereUniqueInput!): Produto
  produtos(where: ProdutoWhereInput! = {}, orderBy: [ProdutoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProdutoWhereUniqueInput): [Produto!]
  produtosCount(where: ProdutoWhereInput! = {}): Int
  foto(where: FotoWhereUniqueInput!): Foto
  fotos(where: FotoWhereInput! = {}, orderBy: [FotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FotoWhereUniqueInput): [Foto!]
  fotosCount(where: FotoWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
